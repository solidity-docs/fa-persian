.. index:: ! error, revert

.. _errors:

*******************************
خطاها و عبارت واکشی
*******************************

خطاهای سالیدیتی یک روش مناسب و کارآمد برای ارائه توضیحات در مورد عدم موفقیت یک
عملیات به کار بر ارائه می دهد. آنها می توانند در داخل و خارج از قرارداد( از جمله رابط ها و کتابخانه ها) تعریف شوند.

آنها باید به همارت :ref:`عبارت revert <revert-statement>` استفاده شوند که باعث می شود همه تغییرات در فراخوانی
فعلی برگردانده شود داده های خطا به فراخوانی کننده منتقل می شود.

.. code-block:: solidity

    // SPDX-License-Identifier: GPL-3.0
    pragma solidity ^0.8.4;

    /// Insufficient balance for transfer. Needed `required` but only
    /// `available` available.
    /// @param available balance available.
    /// @param required requested amount to transfer.
    error InsufficientBalance(uint256 available, uint256 required);

    contract TestToken {
        mapping(address => uint) balance;
        function transfer(address to, uint256 amount) public {
            if (amount > balance[msg.sender])
                revert InsufficientBalance({
                    available: balance[msg.sender],
                    required: amount
                });
            balance[msg.sender] -= amount;
            balance[to] += amount;
        }
        // ...
    }

خطاها غیر قابل بارگزاری یا بازنویسی هستنتد اما قابل وراثت هستند.
همان خطا می تواند در چند مکان مختلف تعریف شود تا زمانی که در محدوده دید همپوشانی نداشته باشد. نمونه خطاها
فقط می توانند توسط عبارت ``revert`` تولید شوند.

خطا داده را تولید می کند و آن را به همراه عملیات revert به فراخوانی کننده خارج از زنجیره
یا به گیرنده عبارت :ref:`try/catch statement <try-catch>` بر می گرداند. نکته اینکه یک خطا تنها زمانی گرفته می شود که
توسط یک فراخوانی خارجی انجام شده باشد، واکشی ها در فراخوانی داخلی  اتفاق می افتد و
داخل همان تابع غیر قابل گرفتن است.

اگر هیچ ورودی فراهم نشود، شما فقط به 4 بایت داده خطا نیاز دارید و شما می توانید از
:ref:`NatSpec <natspec>` در بالا برای توضیح بیشتر دلایل این خطا، که در زنجیره ذخیره نشده است، استفاده
کنید.
This makes this a very cheap and convenient error-reporting feature at the same time.

دقیقتر اینکه، یک نمونه خطا به همان صورت ABI کدکذاری می شود که فراخوانی به یک نابع با
همان نام و نوع های آن است و سپس به عنوان داده بازگشت ``revert`` در کد باز گردانده می شود. به
این معناست که داده ها از یک انتخابگر 4 بایتی و سپس داده های کد شده توسط :ref:`ABI-encoded<abi>` تشکیل
شده اند. انتخابگر شامل 4 بایت اول هش keccak256-hash از نوع خطا است.

.. note::
    این امکان وجود دارد که یک قرارداد با خطاهای مختلف به همین نام یا حتی با خطاهایی که
    در مکان هایی یکسان هستند تعریف شده باشند و توسط فراخوانی کننده قابل تشخیص نباشند،
    بازگردد. برای خارج ، یعنی ABI ، فقط با نام خطا ارتباط دارد، نه قرارداد و نه فایلی که در آن
    تعریف شده است.

عبارت ``;require(condition, "description")`` معادل خواهد بود
با ``if (!condition) revert Error("description")`` اگر شما بتوانید تعریف کنید 
``error Error(string)``.
آن ``Error`` یک نوع داخلی است و در کد فراهم شده توسط کاربر قابل تعریف نیست.

مشابها، یک خطای ``assert`` یا شرایط مشابه به همراه یک خطایی از نوع داخلی
``Panic(uint256)`` خواهد بود.

.. note::
    داده های خطا فقط باید برای نشان دادن خطا مورد استفاده قرار گیرند، نه برای کنترل
    جریان. دلیل آن این است که داده های بازگشتی از فراخوانی داخلی به صورت پیش فرض از
    طریق زنجیره فراخوانی های خارجی پخش می شوند. این بدان معناست که یک فراخوانی
    داخلی می تواند "جعل" کند، داده هایی را که به نظر می رسد از آن قرارداد فراخانی شده است.
