.. _inline-assembly:

###############
مونتاژ داخلی (Inline Assembly)
###############

.. index:: ! assembly, ! asm, ! evmasm


می‌توانید دستورات سالیدیتی را با اسمبلی درون خطی به زبانی نزدیک به ماشین مجازی اتریوم جا دهید. این به 
شما کنترل دقیق‌تری می‌دهد، که به ویژه هنگامی که با نوشتن کتابخانه‌ها زبان را تقویت می‌کنید مفید است.


زبانی که برای مونتاژ خطی در سالیدیتی استفاده می‌شود :ref:`Yul <yul>` نام دارد و در بخش مخصوص خود مستند شده 
است. این بخش فقط نحوه ارتباط کد مونتاژ درون خطی با کد سالیدیتی را پوشش می‌دهد.




.. warning::

    مونتاژ داخلی راهی برای دسترسی به ماشین مجازی اتریوم در سطح پایین است. مونتاژ داخلی چندین ویژگی 
    ایمنی مهم و بررسی سالیدیتی را دور می‌زند. شما فقط باید از آن برای وظایفی که به آن نیاز دارند استفاده کنید 
    و فقط در صورت اطمینان از استفاده از آن.

یک بلوک مونتاژ درون خطی با ``{ ... } assembly`` مشخص می‌شود، جایی که کد داخل آکولاد ها به زبان :ref:`Yul <yul>` 
کد است.



کد مونتاژ درون خطی می‌تواند به متغیرهای سالیدیتی محلی دسترسی پیدا کند که در زیر توضیح داده شده است.



بلوک‌های مختلف مونتاژ درون خطی هیچ نامی ندارند، به عنوان مثال نمی‌توان یک تابع Yul را فراخوانی کرد یا 
به یک متغیر Yul که در یک بلوک مونتاژ داخلی متفاوت تعریف شده است دسترسی پیدا کرد.


مثال
-------

مثال زیر کد کتابخانه‌ای را برای دسترسی به کد قرارداد دیگر و بارگذاری آن در متغیر  ``bytes`` ارائه می‌دهد. این امر با استفاده 
از  ``<address>.code`` با "Plain Solidity" نیز امکان پذیر است. اما نکته اینجاست که کتابخانه‌های اسمبلی قابل استفاده مجدد 
می‌توانند زبان سالیدیتی را بدون تغییر کامپایلر افزایش دهند.


.. code::

    // SPDX-License-Identifier: GPL-3.0
    pragma solidity >=0.4.16 <0.9.0;

    library GetCode {
        function at(address _addr) public view returns (bytes memory o_code) {
            assembly {
                // retrieve the size of the code, this needs assembly
                let size := extcodesize(_addr)
                // allocate output byte array - this could also be done without assembly
                // by using o_code = new bytes(size)
                o_code := mload(0x40)
                // new "memory end" including padding
                mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))
                // store length in memory
                mstore(o_code, size)
                // actually retrieve the code, this needs assembly
                extcodecopy(_addr, add(o_code, 0x20), 0, size)
            }
        }
    }

مونتاژ داخلی در مواردی که بهینه ساز قادر به تولید کد کارآمد نباشد، مفید است، به عنوان مثال:


.. code::

    // SPDX-License-Identifier: GPL-3.0
    pragma solidity >=0.4.16 <0.9.0;


    library VectorSum {
        // This function is less efficient because the optimizer currently fails to
        // remove the bounds checks in array access.
        function sumSolidity(uint[] memory _data) public pure returns (uint sum) {
            for (uint i = 0; i < _data.length; ++i)
                sum += _data[i];
        }

        // We know that we only access the array in bounds, so we can avoid the check.
        // 0x20 needs to be added to an array because the first slot contains the
        // array length.
        function sumAsm(uint[] memory _data) public pure returns (uint sum) {
            for (uint i = 0; i < _data.length; ++i) {
                assembly {
                    sum := add(sum, mload(add(add(_data, 0x20), mul(i, 0x20))))
                }
            }
        }

        // Same as above, but accomplish the entire code within inline assembly.
        function sumPureAsm(uint[] memory _data) public pure returns (uint sum) {
            assembly {
                // Load the length (first 32 bytes)
                let len := mload(_data)

                // Skip over the length field.
                //
                // Keep temporary variable so it can be incremented in place.
                //
                // NOTE: incrementing _data would result in an unusable
                //       _data variable after this assembly block
                let data := add(_data, 0x20)

                // Iterate until the bound is not met.
                for
                    { let end := add(data, mul(len, 0x20)) }
                    lt(data, end)
                    { data := add(data, 0x20) }
                {
                    sum := add(sum, mload(data))
                }
            }
        }
    }



دسترسی به متغیرها، توابع و کتابخانه‌های خارجی
-----------------------------------------------------

با استفاده از نام متغیرهای سالیدیتی و سایر identifier ها می‌توانید به آنها دسترسی پیدا کنید.


متغیرهای محلی از نوع ارزش به طور مستقیم در اسمبلی درون خطی قابل استفاده هستند.


متغیرهای محلی که به مِمُوری اشاره می‌کنند به آدرس متغیر موجود در مِمُوری ارزیابی می‌شوند نه خود مقدار. چنین متغیرهایی را 
می‌توان به آن‌ها نیز اختصاص داد، اما توجه داشته باشید که یک انتساب فقط نشانگر را تغییر می‌دهد و نه داده‌ها را و این مسئولیت 
شماست که به مدیریت مِمُوری سالیدیتی توجه کنید. قسمت :ref:`Conventions in Solidity <conventions-in-solidity>` را مشاهده کنید.

به طور مشابه، متغیرهای محلی که به آرایه‌های calldata با اندازه استاتیک یا ساختارهای calldata اشاره می‌کنند، به آدرس 
متغیر در calldata، نه خود مقدار، ارزیابی می‌شوند. همچنین می‌توان یک آفست جدید به متغیر اختصاص داد، اما توجه داشته 
باشید که هیچ اعتبارسنجی برای اطمینان از اینکه متغیر فراتر از ``()calldatasize`` قرار نمی‌گیرد، انجام نمی‌شود.

برای آرایه‌های calldata پویا، می‌توانید با استفاده از ``x.offset`` و ``x.length`` به offset call data (بر حسب بایت) و 
طول (تعداد عناصر) آنها دسترسی داشته باشید. هر دو عبارت را نیز می‌توان به آن اختصاص داد، اما در مورد حالت استاتیک، هیچ 
اعتبارسنجی برای اطمینان از اینکه ناحیه داده حاصل در محدوده ``() calldatasize``  است انجام نمی شود.

برای متغیرهای storage  محلی یا متغیرهای حالت، یک شناسه Yul کافی نیست، زیرا آنها لزوماً یک اسلات storage  
کامل را اشغال نمی‌کنند. بنابراین، " address" آنها از یک اسلات و یک بایت آفست در داخل آن اسلات تشکیل شده است. برای 
بازیابی اسلاتی که متغیر ``x`` به آن اشاره می کند، از ``x.slot`` و برای بازیابی بایت آفست از ``x.offset`` استفاده می‌کنید. استفاده از ``x`` 
خود منجر به خطا می‌شود.

شما همچنین می‌توانید به بخش ``slot.`` یک اشاره گر متغیر storage  محلی اختصاص دهید. برای اینها (structها، آرایه‌ها یا 
mappingها)، قسمت ``offset.`` همیشه صفر است. با این حال، نمی‌توان به قسمت ``slot.`` یا ``offset.`` یک متغیر حالت اختصاص داد.

متغیرهای سالیدیتی محلی برای اختصاص دادن (assignments) در دسترس هستند، به عنوان مثال:


.. code::

    // SPDX-License-Identifier: GPL-3.0
    pragma solidity >=0.7.0 <0.9.0;

    contract C {
        uint b;
        function f(uint x) public view returns (uint r) {
            assembly {
                // We ignore the storage slot offset, we know it is zero
                // in this special case.
                r := mul(x, sload(b.slot))
            }
        }
    }


.. warning::

    اگر به متغیرهایی از نوعی دسترسی داشته باشید که کمتر از 256 بیت را شامل می‌شود (به عنوان 
    مثال  ``uint64`` ،  ``address`` یا  ``bytes16`` )، نمی‌توانید هیچ فرضی در مورد بیت‌هایی که بخشی از کدگذاری آن نوع نیستند، داشته 
    باشید. به خصوص، آنها را صفر فرض نکنید. برای ایمن بودن، همیشه قبل از استفاده از آن در زمینه‌ای که مهم است، داده‌ها را به 
    درستی پاک کنید: از  ``uint32 x = f(); assembly { x := and(x, 0xffffffff) /* now use x */ }`` برای پاک 
    کردن signed typeها استفاده کنید،  می‌توانید از آپکد ``signextend``  استفاده کنید: ``assembly { signextend(<num_bytes_of_x_minus_one>, x) }``


از نسخه  0.6.0  سالیدیتی نام یک متغیر اسمبلی درون خطی ممکن است هیچ اعلان قابل مشاهده در محدوده بلوک اسمبلی درون 
خطی (شامل اعلان‌های متغیر، قرارداد و تابع) را تحت الشعاع قرار ندهد.


  از  نسخه 0.7.0 سالیدیتی، متغیرها و توابع اعلام شده در داخل بلوک اسمبلی درون خطی ممکن است حاوی  ``.`` نباشند، اما 
  از  ``.`` برای دسترسی به متغیرهای سالیدیتی از خارج از بلوک اسمبلی درون خطی معتبر است.



مواردی که باید از آنها اجتناب کرد
---------------

اسمبلی داخلی ممکن است ظاهری کاملاً سطح بالا داشته باشد، اما در واقع سطح بسیار پایینی دارد. فراخوانی‌های 
تابع، حلقه‌ها، if ها و سوئیچ ها با قوانین بازنویسی ساده تبدیل می‌شوند و پس از آن، تنها کاری که اسمبلی برای 
شما انجام می‌دهد، مرتب سازی مجدد آپکدهای سبک تابعی، شمارش ارتفاع پشته برای دسترسی متغیرها و حذف 
اسلات‌های پشته برای متغیرهای مونتاژ محلی است. وقتی به انتهای بلوک آنها رسید.


.. _conventions-in-solidity:

کنوانسیون‌ها در سالیدیتی (Conventions in Solidity)
-----------------------


بر خلاف اسمبلیEVM ، سالیدیتی دارای انواع کوتاه‌تر از 256 بیت است، به عنوان مثال ``uint24`` .برای کارآیی، اکثر عملیات حسابی این واقعیت را نادیده می‌گیرند که نوع آنها می‌تواند کوتاه‌تر از 256 بیت باشد 
 و بیت‌های مرتبه بالاتر در صورت لزوم پاک می‌شوند، یعنی کمی قبل از اینکه در مِمُوری نوشته شوند یا قبل از 
 مقایسه کردن. این بدان معناست که اگر از داخل اسمبلی درون خطی به چنین متغیری دسترسی پیدا کنید، 
 ممکن است لازم باشد ابتدا بیت‌های مرتبه بالاتر را به صورت دستی پاک کنید.



سالیدیتی مِمُوری را به روش زیر مدیریت می‌کند. یک "اشاره‌گر مِمُوری آزاد" در موقعیت ``0x40`` در مِمُوری وجود 
دارد. اگر می‌خواهید مِمُوری را تخصیص دهید، از جایی که این اشاره‌گر به آن اشاره میکند، استفاده کنید و آن را 
به روز کنید. هیچ تضمینی وجود ندارد که حافظه قبلاً استفاده نشده‌است و بنابراین نمی‌توانید فرض کنید که 
محتویات آن صفر بایت است. هیچ مکانیزم داخلی برای آزادسازی یا پاکسازی مِمُوریِ اختصاص داده شده وجود 
ندارد. در اینجا یک قطعه اسمبلی وجود دارد که می‌توانید برای تخصیص مِمُوری از فرایند ذکر شده در بالا استفاده 
کنید:


.. code-block:: yul

    function allocate(length) -> pos {
      pos := mload(0x40)
      mstore(0x40, add(pos, length))
    }

64 بایت اول مِمُوری می‌تواند به عنوان "فضای scratch" برای تخصیص کوتاه مدت استفاده شود. 32 بایت پس 
از اشاره‌گر مِمُوری آزاد (یعنی از ``0x60`` شروع می‌شود) به طور دائم صفر است و به عنوان مقدار اولیه برای آرایه‌های 
مِمُوری پویای خالی استفاده می‌شود. این بدان معناست که حافظه قابل تخصیص از ``0x80`` شروع می‌شود که مقدار 
اولیه نشانگر حافظه آزاد است.

عناصر موجود در آرایه‌های مِمُوری در سالیدیتی همیشه مضرب 32 بایت را اشغال می‌کنند (این حتی برای ``[]byte`` 
صادق است، اما برای ``bytes`` و ``string`` صادق نیست). آرایه‌های مِمُوری چند بعدی اشاره‌گرهایی به آرایه‌های مِمُوری 
هستند. طول یک آرایه پویا در اولین اسلات آرایه ذخیره می‌شود و سپس عناصر آرایه دنبال می‌شود.


.. warning::

    آرایه‌های مِمُوری با اندازه استاتیک دارای length field نیستند، اما ممکن است بعداً اضافه شوند تا قابلیت تبدیل 
    بهتری بین آرایه‌های اندازه استاتیک و پویا ایجاد شود، بنابراین به این موضوع اتکا نکنید.

   